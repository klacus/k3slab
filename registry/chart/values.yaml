name: registry

image:
  repository: registry
  imagePullPolicy: IfNotPresent
  tag: 3

serviceAccountName: registry

# It is a good practice to request resources to ensure enough CPU and RAM for optimal performance.
# Limits only needed if you need to prevent burst to certain limits
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  # limits:
  #   cpu: 500m
  #   memory: 512Mi

registry:
  annotations: {}
  disableOpenTelemetry: false

ui: 
  enabled: true
  image:
    repository: joxit/docker-registry-ui
    tag: 2.5
    imagePullPolicy: IfNotPresent
  allowDelete: false
  registryTitle: "Container Image Registry"


storage:
  size: 2Gi

# Set the ingress values in your custom values file based on your local environment.
ingress:
  registry:
    # host: "registry.services.example.com"
    annotations: {}
      # # add an annotation indicating the issuer to use.
      # cert-manager.io/cluster-issuer: <issuer-name>
      # # configuring the certificate
      # cert-manager.io/common-name: "registry.services.example.com/"
      # cert-manager.io/subject-organizations: "Home Lab"
      # cert-manager.io/subject-organizationalunits: "K3s Lab Container Image Registry"
      # cert-manager.io/duration: 720h
      # cert-manager.io/renew-before: 240h
      # cert-manager.io/usages: "digital signature,key agreement,server auth, client auth"
  ui:
    host: "registry.services.example.com"
    annotations: {}
      # # add an annotation indicating the issuer to use.
      # cert-manager.io/cluster-issuer: <issuer-name>
      # # configuring the certificate
      # cert-manager.io/common-name: "registryui.services.example.com/"
      # cert-manager.io/subject-organizations: "Home Lab"
      # cert-manager.io/subject-organizationalunits: "K3s Lab Container Image Registry UI"
      # cert-manager.io/duration: 720h
      # cert-manager.io/renew-before: 240h
      # cert-manager.io/usages: "digital signature,key agreement,server auth, client auth"

